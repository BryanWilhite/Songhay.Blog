{
  "author": null,
  "content": "<p>The intention here is to examine how <code>dotnet new</code> templates “wire up” a Node.js-based Angular project with a Visual Studio project. This wiring appears to be handled by <code>JavaScriptServices</code> [<a href=\"https://github.com/aspnet/javascriptservices\">GitHub</a>] via the .NET Foundation.</p><p>In the Q2 2018 time frame, we have <code>Microsoft.DotNet.Web.Spa.ProjectTemplates</code> [<a href=\"https://www.nuget.org/packages/Microsoft.DotNet.Web.Spa.ProjectTemplates/\">NuGet</a>] or we have <a href=\"https://docs.microsoft.com/en-us/aspnet/core/spa/index?view=aspnetcore-2.1#installation\">this command</a>:</p><pre class=\"console\"><code>dotnet new --install Microsoft.DotNet.Web.Spa.ProjectTemplates::2.0.0</code></pre><p>The assumption here is that any another <code>Spa</code> package from Microsoft is out of date or, worse, overlapping with what is aforementioned.</p><p>The <code>dotnet new angular -o my-new-app</code> command generates an ASP.NET Core project that for the first time respects the existence of the <a href=\"https://docs.microsoft.com/en-us/aspnet/core/spa/angular?view=aspnetcore-2.1&amp;tabs=visual-studio#run-ng-commands\">Angular CLI</a> and improves the relationship between the Visual Studio project and Node.js.</p><h3 id=\"how-the-visual-studio-project-is-customized-for-angular\">how the Visual Studio project is customized for Angular</h3><p>A Visual Studio project—specifically the <code>*.csproj</code> file—is made up of a bunch of <code>PropertyGroup</code> and <code>ItemGroup</code> elements, punctuated with optional <code>Target</code> elements.</p><p>The <code>dotnet new</code> command for angular adds these elements to the first <code>PropertyGroup</code>:</p><ul><li><code>SpaRoot</code></li><li><code>DefaultItemExcludes</code></li><li><code>BuildServerSideRenderer</code></li></ul><p>Following these declarations, is this <code>ItemGroup</code>:</p><div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode xml\"><code class=\"sourceCode xml\"><a class=\"sourceLine\" id=\"cb2-1\" data-line-number=\"1\"><span class=\"kw\">&lt;ItemGroup&gt;</span></a><a class=\"sourceLine\" id=\"cb2-2\" data-line-number=\"2\"><span class=\"co\">&lt;!-- Don't publish the SPA source files, but do show them in the project files list --&gt;</span></a><a class=\"sourceLine\" id=\"cb2-3\" data-line-number=\"3\"><span class=\"kw\">&lt;Content</span><span class=\"ot\"> Remove=</span><span class=\"st\">\"$(SpaRoot)**\"</span><span class=\"kw\">/&gt;</span></a><a class=\"sourceLine\" id=\"cb2-4\" data-line-number=\"4\"><span class=\"kw\">&lt;None</span><span class=\"ot\"> Include=</span><span class=\"st\">\"$(SpaRoot)**\"</span><span class=\"ot\"> Exclude=</span><span class=\"st\">\"$(SpaRoot)node_modules\\**\"</span><span class=\"kw\">/&gt;</span></a><a class=\"sourceLine\" id=\"cb2-5\" data-line-number=\"5\"><span class=\"kw\">&lt;/ItemGroup&gt;</span></a></code></pre></div><p>Finally, two <code>Target</code> elements are declared:</p><ul><li><code>&lt;Target Name=\"DebugEnsureNodeEnv\"…</code></li><li><code>&lt;Target Name=\"PublishRunWebpack\"…</code></li></ul><h3 id=\"the-clientapp-under-the-sparoot\">the <code>ClientApp</code> under the <code>SpaRoot</code></h3><p>The XML declarations in the <code>*.csproj</code> file make several references to the <code>SpaRoot</code> (single-page application root). The <code>SpaRoot</code> declaration refers to a folder called <code>ClientApp</code>:</p><div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode xml\"><code class=\"sourceCode xml\"><a class=\"sourceLine\" id=\"cb3-1\" data-line-number=\"1\"><span class=\"kw\">&lt;SpaRoot&gt;</span>ClientApp\\<span class=\"kw\">&lt;/SpaRoot&gt;</span></a></code></pre></div><p>The <code>ClientApp</code> folder sits outside of (next to) the <code>\\wwwroot</code> folder but the <code>IServiceCollection.AddSpaStaticFiles()</code> call generated in <code>Startup.cs</code> clearly states that <code>ClientApp/dist</code> folder will be exposed to the live server just like the conventions around <code>\\wwwroot</code>.</p><p>The <code>&lt;Target Name=\"PublishRunWebpack\"…</code> declaration in <code>*.csproj</code> refers to <code>$(SpaRoot)dist\\</code> (and <code>$(SpaRoot)dist-server\\</code>) which leads back to <code>ClientApp/dist</code>.</p><p>This arrangement completely separates the contents of <code>ClientApp</code> from the rest of the Visual Studio “world” around it. The aforementioned <code>DefaultItemExcludes</code> declaration in <code>*.csproj</code> prevents Visual Studio from “reaching” into <code>ClientApp</code>:</p><div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode xml\"><code class=\"sourceCode xml\"><a class=\"sourceLine\" id=\"cb4-1\" data-line-number=\"1\"><span class=\"kw\">&lt;DefaultItemExcludes&gt;</span>$(DefaultItemExcludes);$(SpaRoot)node_modules\\**<span class=\"kw\">&lt;/DefaultItemExcludes&gt;</span></a></code></pre></div>",
  "inceptDate": "2018-06-27T13:28:28.3824392-07:00",
  "isPublished": true,
  "itemCategory": null,
  "modificationDate": "0001-01-01T00:00:00",
  "slug": "asp-net-core-angular-client-app-q2-2018",
  "sortOrdinal": 0,
  "tag": null,
  "title": "ASP.NET Core Angular Client App Q2 2018"
}